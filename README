

Active Record Presenters
========================

Object oriented helpers. An alternative to passing objects around to methods defined in app/helpers/*.

 # app/presenters/post_presenter.rb
 class PostPresenter
   def timestamp
     "Created #{object.created_at.strftime("%d")}"
   end
 end

  <%= @post.presents.timestamp %>

Instead of:

  def post_timestamp(post)
	  "Created #{post.created_at.strftime("%d")}"
  end

  <%= post_timestamp(@post) %>

Presenters are generated with "ruby script/generate presenter [my_model]".

Installation instructions
=========================

* Install the plugin with 'ruby script/plugin install git://github.com/leethal/active-record-presenters.git'
* ????
* Profit!

Usage
=====

You have to create one presenter per model you want to add presenter functionality to. Use 'ruby script/generate presenter model_name'. Assuming you have a Post model:

 ruby script/generate presenter post

This creates app/presenters/post_presenter. For the purpose of understanding how it works, make it look like this:

 class PostPresenter < Presenter
   def title
     object.title.titleize
   end
 
   def textilized_body
     helpers.textilize(object.body)
   end
 end

The methods defined by the presenter is available through Post#presenter. Example usage in a view:

 <% @posts.each do |post| %>
   <h2><%= post.presents.title %></h2>
   <%= post.presents.textilized_body %>
 <% end %>

In the presenter, 'object' refers to the instance of Post, and 'helpers' refers to helper methods. You can call any helper here, such as helpers.content_tag, helpers.time_ago_in_words etc.

FYI
===

This plugin is not the same as ActivePresenter (http://github.com/giraffesoft/active_presenter/tree). ActivePresenter is for handling multiple models in one form. Active Record Presenters (this plugin) is an alternative/supplement to view helpers. I should probably change the name of this plugin to avoid the name clash.